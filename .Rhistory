<<<<<<< HEAD
shiny::runApp('Documents/infoGit/exercises-K42IE/chapter-19-exercises/exercise-5')
library("shiny")
library("shiny")
library("gplot2")
library("shiny")
library("gplot2")
=======
generosity_plot <- ggplot(data = df) +
geom_point(mapping = aes(x = Generosity, y = co2), color = "orange", alpha = 0.3) +
geom_smooth(mapping = aes(x = Generosity, y = co2), color = "orange", alpha = 0.3) +
labs(y = "CO2", x = "Generosity") +
ggtitle("CO2 v. Gnerosity")
generosity_plot
gdp_plot <- ggplot(data = df) +
geom_point(mapping = aes(x = GDP.per.capita, y = co2), color = "azure", alpha = 0.3) +
geom_smooth(mapping = aes(x = GDP.per.capita, y = co2), color = "azure", alpha = 0.3) +
labs(y = "CO2", x = "GDP per Capita") +
ggtitle("CO2 v. GDP per Capita")
gdp_plot
ggplot(data = df) +
geom_point(mapping = aes(x = Perceptions.of.corruption, y = co2), color = "purple", alpha = 0.3) +
geom_smooth(mapping = aes(x = Perceptions.of.corruption, y = co2), color = "purple", alpha = 0.3) +
labs(y = "CO2", x = "Perceptions of Corruption") +
ggtitle("CO2 v. Perceptions of Corruption")
corruption_plot <- ggplot(data = df) +
geom_point(mapping = aes(x = Perceptions.of.corruption, y = co2), color = "purple", alpha = 0.3) +
geom_smooth(mapping = aes(x = Perceptions.of.corruption, y = co2), color = "purple", alpha = 0.3) +
labs(y = "CO2", x = "Perceptions of Corruption") +
ggtitle("CO2 v. Perceptions of Corruption")
freedom_plot <- ggplot(data = df) +
>>>>>>> 54944b1ff43de35c3641e6c8824fad1bb269f1d4
geom_point(mapping = aes(x = Freedom.to.make.life.choices, y = co2), color = "green", alpha = 0.3) +
geom_smooth(mapping = aes(x = Freedom.to.make.life.choices, y = co2), color = "green", alpha = 0.3) +
labs(y = "CO2", x = "Freedom to Make Life Choices") +
ggtitle("CO2 v. Freedom to Make Life Choices")
freedom_plot
social_plot <- ggplot(data = df) +
geom_point(mapping = aes(x = Social.support, y = co2), color = "blue", alpha = 0.3) +
geom_smooth(mapping = aes(x = Social.support, y = co2), color = "blue", alpha = 0.3)
labs(y = "CO2", x = "Social Support") +
ggtitle("CO2 v. Social Support")
social_plot
social_plot <- ggplot(data = df) +
geom_point(mapping = aes(x = Social.support, y = co2), color = "blue", alpha = 0.3) +
geom_smooth(mapping = aes(x = Social.support, y = co2), color = "blue", alpha = 0.3) +
labs(y = "CO2", x = "Social Support") +
ggtitle("CO2 v. Social Support")
social_plot
life_plot <- ggplot(data = df) +
geom_point(mapping = aes(x = Healthy.life.expectancy, y = co2), color = "red", alpha = 0.3) +
geom_smooth(mapping = aes(x = Healthy.life.expectancy, y = co2), color = "red", alpha = 0.3) +
labs(y = "CO2", x = "Life Expectancy") +
ggtitle("CO2 v. Life Expectancy")
life_plot
happinesss_plot <- ggplot(data = df) +
geom_point(mapping = aes(x = Score, y = co2), color = "red", alpha = 0.3) +
geom_smooth(mapping = aes(x = Score, y = co2), color = "red", alpha = 0.3) +
labs(y = "CO2", x = "Happiness Score") +
ggtitle("CO2 v. Happiness Score")
happinesss_plot
happinesss_plot <- ggplot(data = df) +
geom_point(mapping = aes(x = Score, y = co2), color = "yellow", alpha = 0.3) +
geom_smooth(mapping = aes(x = Score, y = co2), color = "yellow", alpha = 0.3) +
labs(y = "CO2", x = "Happiness Score") +
ggtitle("CO2 v. Happiness Score")
happinesss_plot
happinesss_plot <- ggplot(data = df) +
geom_smooth(mapping = aes(x = Score, y = co2), color = "yellow", alpha = 0.3) +
geom_point(mapping = aes(x = Healthy.life.expectancy, y = co2), color = "red", alpha = 0.3) +
geom_point(mapping = aes(x = Social.support, y = co2), color = "blue", alpha = 0.3) +
geom_point(mapping = aes(x = Freedom.to.make.life.choices, y = co2), color = "green", alpha = 0.3) +
geom_point(mapping = aes(x = Perceptions.of.corruption, y = co2), color = "purple", alpha = 0.3) +
geom_point(mapping = aes(x = GDP.per.capita, y = co2), color = "azure", alpha = 0.3) +
geom_point(mapping = aes(x = Generosity, y = co2), color = "orange", alpha = 0.3) +
labs(y = "CO2", x = "Happiness Score") +
ggtitle("CO2 v. Happiness Score")
happinesss_plot
happinesss_plot <- ggplot(data = df) +
geom_smooth(mapping = aes(x = Score, y = co2), color = "yellow", alpha = 0.3) +
geom_point(mapping = aes(x = Score, y = co2), color = "yellow", alpha = 0.3) +
labs(y = "CO2", x = "Happiness Score") +
ggtitle("CO2 v. Happiness Score")
happinesss_plot
certain regions and continents across the world?
What information it reveals:
lowest_co2 <- df %>%
n_top(5, wt = -Score)
certain regions and continents across the world?
What information it reveals:
lowest_co2 <- df %>%
top_n(5, wt = -Score)
View(lowest_co2)
ggplot(data = df) +
geom_smooth(mapping = aes(x = Score, y = co2), color = "yellow", alpha = 0.3) +
geom_hex(mapping = aes(x = Score, y = co2), color = "yellow", alpha = 0.3) +
labs(y = "CO2", x = "Happiness Score") +
ggtitle("CO2 v. Happiness Score")
View(df)
low_co2 <- ggplot(data = lowest_co2) + geom_bar(mapping = aes(x = Healthy.life.expectancy))
low_co2
low_co2 <- ggplot(data = lowest_co2) + geom_bar(mapping = aes(x = Healthy.life.expectancy)) +
facet_wrap(~name)
low_co2
low_co2 <- ggplot(data = lowest_co2) + geom_bar(mapping = aes(x = name, fill = Score))
low_co2
ggplot(data = df) +
geom_smooth(mapping = aes(x = Score, y = co2), color = "yellow", alpha = 0.3) +
geom_point(mapping = aes(x = Score, y = co2), color = "yellow", alpha = 0.3) +
labs(y = "CO2", x = "Happiness Score") +
ggtitle("CO2 v. Happiness Score")
happinesss_plot
What it attempts to seeks to express:
For the 5 countries with the lowest CO2 emission in 2018,
how do the happiness factors compare?
What information it reveals:
happiest <- df %>%
top_n(5, wt = Score)
View(happiest)
happiest <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, y = co2, fill = Score))
happiest
happiest <- ggplot(data = happiest) + geom_bar(mapping = aes(x = co2, fill = Score)) +
facet_wrap(~name)
What it attempts to seeks to express:
For the 5 countries with the lowest CO2 emission in 2018,
how do the happiness factors compare?
What information it reveals:
happiest <- df %>%
top_n(5, wt = Score)
happiest <- ggplot(data = happiest) + geom_bar(mapping = aes(x = co2, fill = Score)) +
facet_wrap(~name)
happiest
happiest <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, fill = Score))
What it attempts to seeks to express:
For the 5 countries with the lowest CO2 emission in 2018,
how do the happiness factors compare?
What information it reveals:
happiest <- df %>%
top_n(5, wt = Score)
happiest <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, fill = Score))
happiest
happiest <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, count = co2, fill = Score))
What it attempts to seeks to express:
For the 5 countries with the lowest CO2 emission in 2018,
how do the happiness factors compare?
What information it reveals:
happiest <- df %>%
top_n(5, wt = Score)
happiest <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, count = co2, fill = Score))
happiest <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, weight = co2, fill = Score))
What it attempts to seeks to express:
For the 5 countries with the lowest CO2 emission in 2018,
how do the happiness factors compare?
What information it reveals:
happiest <- df %>%
top_n(5, wt = Score)
happiest <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, weight = co2, fill = Score))
happiest_plot <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, weight = co2, fill = Score))
happiest_plot <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, weight = co2, fill = Score))
What it attempts to seeks to express:
For the 5 countries with the lowest CO2 emission in 2018,
how do the happiness factors compare?
What information it reveals:
happiest <- df %>%
top_n(5, wt = Score)
happiest_plot <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, weight = co2, fill = Score))
happiest_plot
happiest_plot <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, weight = co2, fill = co2))
happiest_plot
happyness_data <- read.csv("data/happiness/2018.csv", stringsAsFactors = FALSE)
co2_data <- read.csv("data/owid-co2-data.csv", stringsAsFactors = FALSE)
# filtering co2_data to contain only information we need
edit_co2_data <- co2_data %>%
filter(year == 2018) %>%
select(country, co2, cumulative_co2, population, ghg_per_capita) %>%
rename(Country.or.region = country)
# Joining edit_co2_data and happyness_data by country (inner join)
final_data <- inner_join(happyness_data, edit_co2_data, by = 'Country.or.region')
# Joining edit_co2_data and happyness_data by country (inner join)
final_data <- inner_join(happyness_data, edit_co2_data, by = 'Country.or.region')
# Saving final_data to data folder for this project
write.csv(final_data, "data/final_data.csv", row.names = FALSE)
final_data_updated <- final_data %>%
mutate(Corruption.perceptions = as.numeric(Perceptions.of.corruption))
View(final_data)
# Joining edit_co2_data and happyness_data by country (inner join)
final_data <- inner_join(happyness_data, edit_co2_data, by = 'Country.or.region') %>%
mutate(Corruption.perceptions = as.numeric(Perceptions.of.corruption))
happyness_data <- read.csv("data/happiness/2018.csv", stringsAsFactors = FALSE)
co2_data <- read.csv("data/owid-co2-data.csv", stringsAsFactors = FALSE)
# filtering co2_data to contain only information we need
edit_co2_data <- co2_data %>%
filter(year == 2018) %>%
select(country, co2, cumulative_co2, population, ghg_per_capita) %>%
rename(Country.or.region = country)
View(co2_data)
View(edit_co2_data)
View(co2_data)
# filtering co2_data to contain only information we need
edit_co2_data <- co2_data %>%
filter(year == 2018) %>%
select(country, co2, cumulative_co2, population) %>%
rename(Country.or.region = country)
# Joining edit_co2_data and happyness_data by country (inner join)
final_data <- inner_join(happyness_data, edit_co2_data, by = 'Country.or.region') %>%
mutate(Corruption.perceptions = as.numeric(Perceptions.of.corruption))
# Joining edit_co2_data and happyness_data by country (inner join)
final_data <- inner_join(happyness_data, edit_co2_data, by = 'Country.or.region') %>%
mutate(Corruption.perceptions = as.numeric(Perceptions.of.corruption), rm.na = F)
# Joining edit_co2_data and happyness_data by country (inner join)
final_data <- inner_join(happyness_data, edit_co2_data, by = 'Country.or.region') %>%
mutate(Corruption.perceptions = as.numeric(Perceptions.of.corruption), na.rm = F)
# Joining edit_co2_data and happyness_data by country (inner join)
final_data <- inner_join(happyness_data, edit_co2_data, by = 'Country.or.region') %>%
mutate(Corruption.perceptions = as.numeric(Perceptions.of.corruption), na.rn = F)
# Joining edit_co2_data and happyness_data by country (inner join)
final_data <- inner_join(happyness_data, edit_co2_data, by = 'Country.or.region') %>%
mutate(Corruption.perceptions = as.numeric(Perceptions.of.corruption), na.rn = T)
inner_join(happyness_data, edit_co2_data, by = 'Country.or.region') %>%
mutate(Corruption.perceptions = as.numeric(Perceptions.of.corruption), na.rn = T)
# filtering co2_data to contain only information we need
edit_co2_data <- co2_data %>%
filter(year == 2018) %>%
select(country, co2, cumulative_co2, population) %>%
rename(Country.or.region = country)
final_data <- mutate
# Joining edit_co2_data and happyness_data by country (inner join)
final_data <- inner_join(happyness_data, edit_co2_data, by = 'Country.or.region')
View(final_data)
final_data <- final_data %>%
mutate(Corruption.perceptions = as.numeric(Perceptions.of.corruption))
final_data %>%
mutate(Corruption.perceptions = as.numeric(Perceptions.of.corruption))
final_data <- final_data %>%
as.numeric(Perceptions.of.corruption))
final_data$Perceptions.of.corruption <- as.numeric(final_data$Perceptions.of.corruption))
final_data$Perceptions.of.corruption <- as.numeric(final_data$Perceptions.of.corruption)
final_data$Perceptions.of.corruption <- as.numeric(final_data$Perceptions.of.corruption, na.rn = TRUE)
# Joining edit_co2_data and happyness_data by country (inner join)
final_data <- inner_join(happyness_data, edit_co2_data, by = 'Country.or.region') %>%
mutate(co2.per.capita  = co2/population)
final_data$Perceptions.of.corruption <- as.numeric(final_data$Perceptions.of.corruption, na.rn = TRUE)
# Saving final_data to data folder for this project
write.csv(final_data, "data/final_data.csv", row.names = FALSE)
final_data_updated <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
df <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
What it attempts to seeks to express:
For the 5 countries with the lowest CO2 emission in 2018,
how do the happiness factors compare?
What information it reveals:
happiest <- df %>%
top_n(5, wt = Score)
happiest_plot <- ggplot(data = happiest) + geom_bar(mapping = aes(x = name, weight = co2.per.capita, fill = co2))
happiest_plot
View(happiest_plot)
View(happiest)
happiest_plot <- ggplot(data = happiest) + geom_bar(mapping = aes(x = Country.or.region, weight = co2.per.capita, fill = co2))
happiest_plot
happiest_plot <- ggplot(data = happiest) + geom_bar(mapping = aes(x = Country.or.region, weight = co2.per.capita, fill = co2.per.capita))
happiest_plot
lowest_co2_plot <- ggplot(data = happiest) + geom_bar(mapping = aes(x = Country.or.region, weight = Score, fill = Score))
lowest_co2_plot
lowest_co2_plot <- ggplot(data = lowest_co2) + geom_bar(mapping = aes(x = Country.or.region, weight = Score, fill = Score))
What it attempts to seeks to express:
For the 5 countries with the lowest CO2 emission in 2018,
how do the happiness factors compare?
What information it reveals:
lowest_co2 <- df %>%
top_n(5, wt = -co2.per.capita)
lowest_co2_plot <- ggplot(data = lowest_co2) + geom_bar(mapping = aes(x = Country.or.region, weight = Score, fill = Score))
lowest_co2_plot
lowest_co2_plot <- ggplot(data = lowest_co2) + geom_bar(mapping = aes(x = Country.or.region, weight = Score))
lowest_co2_plot
happiest_plot <- ggplot(data = happiest) + geom_bar(mapping = aes(x = Country.or.region, weight = co2.per.capita))
happiest_plot <- ggplot(data = happiest) + geom_bar(mapping = aes(x = Country.or.region, weight = co2.per.capita))
happiest_plot
>>>>>>> 63cf49a62fbd0ff56882038dabd1bf85469c6992
lowest_co2 <- df %>%
top_n(5, wt = -co2.per.capita)
lowest_co2_plot <- ggplot(data = lowest_co2) +
geom_bar(mapping = aes(x = Country.or.region, weight = Score)) +
labs(y = "Happiness Score", x = "Country") +
ggtitle("Happiness Scores for the Lowest CO2 Per Capita Countries")
lowest_co2_plot_interactive <- ggplotly(lowest_co2_plot, tooltip = "Score")
return(lowest_co2_plot_interactive)
}
co2_happiness_bar(df)
co2_happiness_bar(df)
co2_happiness_bar <- function(df) {
lowest_co2 <- df %>%
top_n(5, wt = -co2.per.capita)
lowest_co2_plot <- ggplot(data = lowest_co2) +
geom_bar(mapping = aes(x = Country.or.region, weight = Score)) +
labs(y = "Happiness Score", x = "Country") +
ggtitle("Happiness Scores for the Lowest CO2 Per Capita Countries")
lowest_co2_plot_interactive <- ggplotly(lowest_co2_plot, tooltip = "Score")
return(lowest_co2_plot_interactive)
}
co2_happiness_bar(df)
df <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library(plotly)
co2_happiness_bar(df)
co2_happiness_bar <- function(df) {
lowest_co2 <- df %>%
top_n(5, wt = -co2.per.capita)
lowest_co2_plot <- ggplot(data = lowest_co2) +
geom_bar(mapping = aes(x = Country.or.region, weight = Score)) +
labs(y = "Happiness Score", x = "Country") +
ggtitle("Happiness Scores for the Lowest CO2 Per Capita Countries")
lowest_co2_plot_interactive <- ggplotly(lowest_co2_plot, tooltip = "Score")
return(lowest_co2_plot_interactive)
}
co2_happiness_bar(df)
library(plotly)
co2_happiness_bar <- function(df) {
lowest_co2 <- df %>%
top_n(5, wt = -co2.per.capita)
lowest_co2_plot <- ggplot(data = lowest_co2) +
geom_bar(mapping = aes(x = Country.or.region, weight = Score)) +
labs(y = "Happiness Score", x = "Country") +
ggtitle("Happiness Scores for the Lowest CO2 Per Capita Countries")
lowest_co2_plot_interactive <- ggplotly(lowest_co2_plot, tooltip = "Score")
return(lowest_co2_plot_interactive)
}
co2_happiness_bar(df)
setwd("~/Documents/infoGit/INFO201_group_project-/scripts")
df <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
>>>>>>> 6a286a99ef9a98755d2d7e33e1fb81e873e839f5
library("ggplot2")
view(midwest)
View(midwest)
View(midwest)
library(shiny)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
colnames("mpg")
View(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
colnames(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
column_nams <- colnames(mpg)
library(shiny)
library(ggplot2)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars")
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars")
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars")
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars"),
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
# Create a variable `x_input` that stores a `selectInput()` for your
# variable to appear on the x axis of your chart.
# Use the vector of column names as possible values, and make sure
# to assign an inputId, label, and selected value
x_input <- selectInput(
inputId = "xIN",
label = h3("Select Your x Imput"),
choices = column_nams, #I dont know if i need to edit this to have keys
selected = "manufacturer"
)
# Using a similar approach, create a variable `y_input` that stores a
# `selectInput()` for your variable to appear on the y axis of your chart.
# Add a `selectInput` for the `y` variable
y_input <- selectInput(
inputId = "yIN",
label = h3("Select Your y Input"),
choices = column_nams, #I dont know if i need to edit this to have keys
selected = "manufacturer"
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = "blue", "green" = "green", "red" = "red"),
selected = blue # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blues9, "green" = green, "red" = red),
selected = blue # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blues9, "green" = green, "red" = red),
selected = blue9 # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blue, "green" = green, "red" = red),
selected = blue # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blue, "green" = green, "red" = red),
selected = "blue" # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blue, "green" = green, "red" = red),
selected = "blue" # i dont know if these colors are correct
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
inputId = "pointSize",
label = h3("Select Point Size"),
choices = list(1, 2, 10, 20)
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blue, "green" = green, "red" = red),
selected = "blue" # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = c("blue" = blue, "green" = green, "red" = red),
selected = "blue" # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = 1, "green" = 2, "red" = 3),
selected = 1 # i dont know if these colors are correct
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
inputId = "pointSize",
label = h3("Select Point Size"),
choices = list(1, 2, 10, 20)
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
inputId = "pointSize",
label = h3("Select Point Size"),
choices = list("1" = 1, "2" = 2, "10" = 10, "20" = 20)
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
inputId = "pointSize",
label = h3("Select Point Size"),
choices = list("1" = 1, "2" = 2, "10" = 10, "20" = 20),
selected = 1
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
inputId = "pointSize",
label = h3("Select Point Size"),
min = 0,
max = 100,
value = 500
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars"),
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars"),
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
runApp('Documents/infoGit/exercises-K42IE/chapter-19-exercises/exercise-5')
runApp('Documents/infoGit/exercises-K42IE/chapter-19-exercises/exercise-5')
# Libraries
library(plotly)
library(shiny)
setwd("~/Documents/infoGit/INFO201_group_project-")
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
View(final_data)
library("dplyr")
select(data,
Country,
Region)
data <- select(data,
Country,
Region)
final_data2 <- left_join(final_data, data, by = Country)
final_data2 <- left_join(final_data, data, by = Country)
final_data2 <- left_join(final_data, data, by = "Country")
data$Country = "Country.or.region"
colnames(data)[1] = "Country.or.region"
final_data2 <- left_join(final_data, data, by = "Country.or.region")
View(final_data2)
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
data <- select(data,
Country,
Region)
colnames(data)[1] = "Country.or.region"
View(final_data2)
data <- data %>%
group(Country.or.region) %>%
summarise()
data <- data %>%
group(Country.or.region) %>%
summarise(Region = Region)
unique(data)
data <- unique(data)
data[data$Country.or.region == "US", ] <- "United States"
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library("dplyr")
data <- select(data,
Country,
Region)
colnames(data)[1] = "Country.or.region"
data <- unique(data)
data[3, "Country.or.region" ] <- "United States"
data[69, "Country.or.region" ] <- "United Kingdom"
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library("dplyr")
data <- select(data,
Country,
Region)
colnames(data)[1] = "Country.or.region"
data <- unique(data)
data[3, "Country.or.region" ] <- "United States"
data[69, "Country.or.region" ] <- "United Kingdom"
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library("dplyr")
data <- select(data,
Country,
Region)
colnames(data)[1] = "Country.or.region"
data <- unique(data)
data[3, "Country.or.region" ] <- "United States"
data[69, "Country.or.region" ] <- "United Kingdom"
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library("dplyr")
data <- select(data,
Country,
Region)
colnames(data)[1] = "Country.or.region"
data <- unique(data)
data[3, "Country.or.region" ] <- "United States"
data[data$Country.or.region == "UK", "Country.or.region"] <- "United Kingdom"
final_data2 <- left_join(final_data, data, by = "Country.or.region")
View(final_data2)
data <- read.csv("data/countryContinent.csv", stringsAsFactors = FALSE)
data <- read.csv("data/countryContinent.csv", stringsAsFactors = FALSE)
View(data)
data <- read.csv("data/countryContinent.csv", stringsAsFactors = FALSE)
data <- read.csv("data/countryContinent.csv", stringsAsFactors = FALSE)
View(data)
data <- read.csv("data/countryContinent2.csv", stringsAsFactors = FALSE)
View(data)
data <- read.csv("data/countryContinent2.csv", stringsAsFactors = FALSE)
View(data)
data <- read.csv("data/countryContinent2.csv", stringsAsFactors = FALSE)
is.data.frame(data)
data <- read.csv("data/countryContinent2.csv", stringsAsFactors = FALSE)
setwd("~/Documents/infoGit/INFO201_group_project-")
data <- read.csv("data/countryContinent2.csv", stringsAsFactors = FALSE)
data <- read.csv("data/countryContinent 2.csv", stringsAsFactors = FALSE)
View(data)
View(data)
data <- select(data,
country,
continent)
data[data$Country.or.region == "United Kingdom of Great Britain and Northern Ireland
", "Country.or.region"] <- "United Kingdom"
data <- read.csv("data/countryContinent 2.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library("dplyr")
data <- select(data,
country,
continent)
colnames(data)[1] = "Country.or.region"
data <- unique(data)
data[data$Country.or.region == "United Kingdom of Great Britain and Northern Ireland
", "Country.or.region"] <- "United Kingdom"
data[data$Country.or.region == "
United States of America", "Country.or.region" ] <- "United States"
data[data$Country.or.region == "United Kingdom of Great Britain and Northern Ireland
", "Country.or.region"] <- "United Kingdom"
data[236, "Country.or.region" ] <- "United States"
data[235, "Country.or.region"] <- "United Kingdom"
final_data2 <- left_join(final_data, data, by = "Country.or.region")
View(final_data2)
View(final_data2)
data[147, "continent"] <- "Africa"
final_data2[147, "continent"] <- "Africa"
na_list <- final_data2[final_data2$continent == NA, ]
View(na_list)
na_list <- final_data2[final_data2$continent == NA, "Country.or.region"]
na_list <- final_data2[final_data2$continent == "NA", "Country.or.region"]
View(final_data2)
final_data2[150, "continent"] <- "Asia"
final_data2[150, "continent"] <- "Asia"
View(final_data2)
final_data2[150, "continent"] <- "Africa"
final_data2[144, "continent"] <- "Asia"
final_data2[106, "continent"] <- "Asia"
final_data2[103, "continent"] <- "Asia"
final_data2[100, "continent"] <- "Americas"
final_data2[93, "continent"] <- "Asia"
final_data2[87, "continent"] <- "Europe"
final_data2[65, "continent"] <- "Europe"
final_data2[64, "continent"] <- "Europe"
final_data2[60, "continent"] <- "Americas"
final_data2[57, "continent"] <- "Russia"
final_data2[56, "continent"] <- "Asia"
final_data2[26, "continent"] <- "Asia"
write.csv(final_data2, "data/final_data2.csv", row.names = FALSE)
