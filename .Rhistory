shiny::runApp('Documents/infoGit/exercises-K42IE/chapter-19-exercises/exercise-5')
library("shiny")
library("shiny")
library("gplot2")
library("shiny")
library("gplot2")
library("ggplot2")
view(midwest)
View(midwest)
View(midwest)
library(shiny)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
colnames("mpg")
View(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
colnames(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
column_nams <- colnames(mpg)
library(shiny)
library(ggplot2)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars")
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars")
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars")
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars"),
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
# Create a variable `x_input` that stores a `selectInput()` for your
# variable to appear on the x axis of your chart.
# Use the vector of column names as possible values, and make sure
# to assign an inputId, label, and selected value
x_input <- selectInput(
inputId = "xIN",
label = h3("Select Your x Imput"),
choices = column_nams, #I dont know if i need to edit this to have keys
selected = "manufacturer"
)
# Using a similar approach, create a variable `y_input` that stores a
# `selectInput()` for your variable to appear on the y axis of your chart.
# Add a `selectInput` for the `y` variable
y_input <- selectInput(
inputId = "yIN",
label = h3("Select Your y Input"),
choices = column_nams, #I dont know if i need to edit this to have keys
selected = "manufacturer"
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = "blue", "green" = "green", "red" = "red"),
selected = blue # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blues9, "green" = green, "red" = red),
selected = blue # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blues9, "green" = green, "red" = red),
selected = blue9 # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blue, "green" = green, "red" = red),
selected = blue # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blue, "green" = green, "red" = red),
selected = "blue" # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blue, "green" = green, "red" = red),
selected = "blue" # i dont know if these colors are correct
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
inputId = "pointSize",
label = h3("Select Point Size"),
choices = list(1, 2, 10, 20)
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = blue, "green" = green, "red" = red),
selected = "blue" # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = c("blue" = blue, "green" = green, "red" = red),
selected = "blue" # i dont know if these colors are correct
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
inputId = "colorIn",
label = h3("Select a display color"),
choices = list("blue" = 1, "green" = 2, "red" = 3),
selected = 1 # i dont know if these colors are correct
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
inputId = "pointSize",
label = h3("Select Point Size"),
choices = list(1, 2, 10, 20)
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
inputId = "pointSize",
label = h3("Select Point Size"),
choices = list("1" = 1, "2" = 2, "10" = 10, "20" = 20)
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
inputId = "pointSize",
label = h3("Select Point Size"),
choices = list("1" = 1, "2" = 2, "10" = 10, "20" = 20),
selected = 1
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
inputId = "pointSize",
label = h3("Select Point Size"),
min = 0,
max = 100,
value = 500
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars"),
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h2("Comparring Cars"),
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plot(
outputId = "scatter"
)
)
runApp('Documents/infoGit/exercises-K42IE/chapter-19-exercises/exercise-5')
runApp('Documents/infoGit/exercises-K42IE/chapter-19-exercises/exercise-5')
# Libraries
library(plotly)
library(shiny)
setwd("~/Documents/infoGit/INFO201_group_project-")
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
View(final_data)
library("dplyr")
select(data,
Country,
Region)
data <- select(data,
Country,
Region)
final_data2 <- left_join(final_data, data, by = Country)
final_data2 <- left_join(final_data, data, by = Country)
final_data2 <- left_join(final_data, data, by = "Country")
data$Country = "Country.or.region"
colnames(data)[1] = "Country.or.region"
final_data2 <- left_join(final_data, data, by = "Country.or.region")
View(final_data2)
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
data <- select(data,
Country,
Region)
colnames(data)[1] = "Country.or.region"
View(final_data2)
data <- data %>%
group(Country.or.region) %>%
summarise()
data <- data %>%
group(Country.or.region) %>%
summarise(Region = Region)
unique(data)
data <- unique(data)
data[data$Country.or.region == "US", ] <- "United States"
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library("dplyr")
data <- select(data,
Country,
Region)
colnames(data)[1] = "Country.or.region"
data <- unique(data)
data[3, "Country.or.region" ] <- "United States"
data[69, "Country.or.region" ] <- "United Kingdom"
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library("dplyr")
data <- select(data,
Country,
Region)
colnames(data)[1] = "Country.or.region"
data <- unique(data)
data[3, "Country.or.region" ] <- "United States"
data[69, "Country.or.region" ] <- "United Kingdom"
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library("dplyr")
data <- select(data,
Country,
Region)
colnames(data)[1] = "Country.or.region"
data <- unique(data)
data[3, "Country.or.region" ] <- "United States"
data[69, "Country.or.region" ] <- "United Kingdom"
data <- read.csv("data/counts_country.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library("dplyr")
data <- select(data,
Country,
Region)
colnames(data)[1] = "Country.or.region"
data <- unique(data)
data[3, "Country.or.region" ] <- "United States"
data[data$Country.or.region == "UK", "Country.or.region"] <- "United Kingdom"
final_data2 <- left_join(final_data, data, by = "Country.or.region")
View(final_data2)
data <- read.csv("data/countryContinent.csv", stringsAsFactors = FALSE)
data <- read.csv("data/countryContinent.csv", stringsAsFactors = FALSE)
View(data)
data <- read.csv("data/countryContinent.csv", stringsAsFactors = FALSE)
data <- read.csv("data/countryContinent.csv", stringsAsFactors = FALSE)
View(data)
data <- read.csv("data/countryContinent2.csv", stringsAsFactors = FALSE)
View(data)
data <- read.csv("data/countryContinent2.csv", stringsAsFactors = FALSE)
View(data)
data <- read.csv("data/countryContinent2.csv", stringsAsFactors = FALSE)
is.data.frame(data)
data <- read.csv("data/countryContinent2.csv", stringsAsFactors = FALSE)
setwd("~/Documents/infoGit/INFO201_group_project-")
data <- read.csv("data/countryContinent2.csv", stringsAsFactors = FALSE)
data <- read.csv("data/countryContinent 2.csv", stringsAsFactors = FALSE)
View(data)
View(data)
data <- select(data,
country,
continent)
data[data$Country.or.region == "United Kingdom of Great Britain and Northern Ireland
", "Country.or.region"] <- "United Kingdom"
data <- read.csv("data/countryContinent 2.csv", stringsAsFactors = FALSE)
View(data)
final_data <- read.csv("data/final_data.csv", stringsAsFactors = FALSE)
library("dplyr")
data <- select(data,
country,
continent)
colnames(data)[1] = "Country.or.region"
data <- unique(data)
data[data$Country.or.region == "United Kingdom of Great Britain and Northern Ireland
", "Country.or.region"] <- "United Kingdom"
data[data$Country.or.region == "
United States of America", "Country.or.region" ] <- "United States"
data[data$Country.or.region == "United Kingdom of Great Britain and Northern Ireland
", "Country.or.region"] <- "United Kingdom"
data[236, "Country.or.region" ] <- "United States"
data[235, "Country.or.region"] <- "United Kingdom"
final_data2 <- left_join(final_data, data, by = "Country.or.region")
View(final_data2)
View(final_data2)
data[147, "continent"] <- "Africa"
final_data2[147, "continent"] <- "Africa"
na_list <- final_data2[final_data2$continent == NA, ]
View(na_list)
na_list <- final_data2[final_data2$continent == NA, "Country.or.region"]
na_list <- final_data2[final_data2$continent == "NA", "Country.or.region"]
View(final_data2)
final_data2[150, "continent"] <- "Asia"
final_data2[150, "continent"] <- "Asia"
View(final_data2)
final_data2[150, "continent"] <- "Africa"
final_data2[144, "continent"] <- "Asia"
final_data2[106, "continent"] <- "Asia"
final_data2[103, "continent"] <- "Asia"
final_data2[100, "continent"] <- "Americas"
final_data2[93, "continent"] <- "Asia"
final_data2[87, "continent"] <- "Europe"
final_data2[65, "continent"] <- "Europe"
final_data2[64, "continent"] <- "Europe"
final_data2[60, "continent"] <- "Americas"
final_data2[57, "continent"] <- "Russia"
final_data2[56, "continent"] <- "Asia"
final_data2[26, "continent"] <- "Asia"
write.csv(final_data2, "data/final_data2.csv", row.names = FALSE)
