<<<<<<< HEAD
library("shiny")
library("plotly")
setwd("~/Documents/infoGit/INFO201_group_project-")
data <- read.csv("data\final_data2", stringsAsFactors = FALSE)
data <- read.csv("data\final_data2.csv", stringsAsFactors = FALSE)
setwd("~/Documents/infoGit/INFO201_group_project-")
data <- read.csv("data\final_data2.csv", stringsAsFactors = FALSE)
data <- read.csv("data\final_data 2.csv", stringsAsFactors = FALSE)
data <- read.csv("data\final_data2.csv", stringsAsFactors = FALSE)
setwd("~/Documents/infoGit/INFO201_group_project-")
data <- read.csv("data\final_data2.csv", stringsAsFactors = FALSE)
data <- read.csv("data\final_data2.csv", stringsAsFactors = FALSE)
data <- read.csv("data\final_data2.csv", stringsAsFactors = FALSE)
data <- read.csv(".\data\final_data2.csv", stringsAsFactors = FALSE)
data <- read.csv("data\final_data2.csv", stringsAsFactors = FALSE)
data <- read.csv("data\final_data.csv", stringsAsFactors = FALSE)
data <- read.csv("data\final_data2.csv", stringsAsFactors = FALSE)
setwd("~/Documents/infoGit/INFO201_group_project-")
data <- read.csv("data\final_data2.csv", stringsAsFactors = FALSE)
data <- read.csv("data\final_data2.csv", stringsAsFactors = FALSE)
data <- read.csv("data\ffinal_data2.csv", stringsAsFactors = FALSE)
data <- read.csv("data/final_data2.csv", stringsAsFactors = FALSE)
View(data)
View(data)
df <- read.csv("data/final_data2.csv", stringsAsFactors = FALSE)
refined_df <- filter(df, continent %in% input$checkRegion)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
)
server <- function(input, output) {
output$plot <- renderPlot({
plot_data <- final_data %>%
filter(GDP.per.capita > gdp_range[1], GDP.per.capita < gdp_range[2])
p <- ggplot(
data = plot_data,
mapping = aes_string(x = input$factor y = "GDP.per.capita")
)
p
})
}
runApp()
+ geom_point()
p <- ggplot(
data = plot_data,
mapping = aes_string(x = input$factor, y = "GDP.per.capita")
) +
geom_point()
server <- function(input, output) {
output$plot <- renderPlot({
plot_data <- final_data %>%
filter(GDP.per.capita > gdp_range[1], GDP.per.capita < gdp_range[2])
p <- ggplot(
data = plot_data,
mapping = aes_string(x = input$factor, y = "GDP.per.capita")
) +
geom_point()
p
})
}
runApp()
intro_panel <- tabPanel(
"GDP Plot",
titlePanel("GDP Plot"),
p("This is a plot.")
)
gdp_input <- sliderInput(
inputId = "gdp_choice",
label = "GDP Per Capita",
min = gdp_range[1],
max = gdp_range[2],
value = gdp_range
)
sidebar_content <- sidebarPanel(
sliderInput(
inputId = "gdp_choice",
label = "GDP Per Capita",
min = 0,
max = 3,
value = c(0, 3)
)
)
#ui
library(shiny)
library(ggplot2)
library(plotly)
gdp_range <- range(final_data$GDP.per.capita)
select_values <- colnames("final_data")
intro_panel <- tabPanel(
"GDP Plot",
titlePanel("GDP Plot"),
p("This is a plot.")
)
sidebar_content <- sidebarPanel(
sliderInput(
inputId = "gdp_choice",
label = "GDP Per Capita",
min = 0,
max = 3,
value = c(0, 3)
)
)
main_content <- mainPanel(
plotOutput("plot"),
)
ui <- navbarPage(
"GDP",
intro_panel
)
}
server <- function(input, output) {
output$plot <- renderPlot({
p <- ggplot(data = final_data) +
geom_point(mapping = aes_string(x = "Score", y = "GDP.per.capita"))
p
})
}
runApp()
server <- function(input, output) {
output$plot <- renderPlot({
plot <- ggplot(data = final_data) +
geom_point(mapping = aes_string(x = "Score", y = "GDP.per.capita"))
plot
})
}
runApp()
runApp()
ui <- fluidPage(
x_input,
y_input,
plotOutput("scatter")
)
x_input <- selectedInput(
"x_var",
label = "X Variable",
choices = selected_values,
selected = "Score"
)
select_values <- colnames(final_data)
x_input <- selectedInput(
"x_var",
label = "X Variable",
choices = selected_values,
selected = "Score"
)
library(shiny)
x_input <- selectedInput(
"x_var",
label = "X Variable",
choices = selected_values,
selected = "Score"
)
library(plotly)
x_input <- selectedInput(
"x_var",
label = "X Variable",
choices = selected_values,
selected = "Score"
)
library(ggplot2)
x_input <- selectedInput(
"x_var",
label = "X Variable",
choices = selected_values,
selected = "Score"
)
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = selected_values,
selected = "Score"
)
library(shiny)
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "Score"
)
y_input <- selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "Social.support"
)
intro_panel <- tabPanel(
"GDP Plot",
titlePanel("GDP Plot"),
p("This is a plot.")
)
sidebar_content <- sidebarPanel(
sliderInput(
inputId = "gdp_choice",
label = "GDP Per Capita",
min = 0,
max = 3,
value = c(0, 3)
)
)
ui <- fluidPage(
x_input,
y_input,
plotOutput("scatter")
)
runApp()
server <- function(input, output) {
output$plot <- renderPlot({
plot <- ggplot(data = final_data) +
geom_point(mapping = aes_string(x = input$x_var, y = input$y_var))
plot
})
}
runApp()
server <- function(input, output) {
output$scatter <- renderPlot({
plot <- ggplot(data = final_data) +
geom_point(mapping = aes_string(x = input$x_var, y = input$y_var))
plot
})
}
runApp()
View(final_data)
plot_final_data <- final_data %>%
select("Gdp.per.capita")
plot_final_data <- final_data %>%
select("GDP.per.capita")
View(plot_final_data)
plot_final_data <- final_data %>%
select("GDP.per.capita", "Social.support")
View(plot_final_data)
plot_final_data <- final_data %>%
select("GDP.per.capita", "Social.support",
"Healthy.life.expectancy",
"Freedom.to.make.life.choices",
"Generosity",
"Perception.of.corruption")
plot_final_data <- final_data %>%
select("GDP.per.capita", "Social.support",
"Healthy.life.expectancy",
"Freedom.to.make.life.choices",
"Generosity",
"Perceptions.of.corruption")
View(plot_final_data)
server <- function(input, output) {
output$scatter <- renderPlot({
title <- paste0("Scatter Plot:", input$x_var, " v. ", input$y_var)
plot <- ggplot(data = plot_final_data) +
geom_point(mapping = aes_string(x = input$x_var, y = input$y_var)) +
labs(x = input$x_var, y = input$y_var, title = title)
plot
})
}
>>>>>>> 5447f71005f7199ef73f5a4814c3698623f85782
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
runApp()
=======
#ui
library(shiny)
library(ggplot2)
library(plotly)
gdp_range <- range(final_data$GDP.per.capita)
select_values <- colnames(plot_final_data)
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita"
)
y_input <- selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "Social.support"
)
page_one <- tabPanel(
"Scatter Plot",
sidebarLayout(
sidebarPanel =
h2("Select Variables"),
x_input,
y_input
),
mainPanel(
h1("Scatter Plot"),
p("This is paragraph"),
plotOutput("scatter")
)
)
ui <- navbarPage(
"Group Project",
page_one
)
page_one <- tabPanel(
"Scatter Plot",
sidebarLayout(
sidebarPanel =
h2("Select Variables"),
x_input,
y_input
),
mainPanel(
h1("Scatter Plot"),
p("This is paragraph"),
plotOutput("scatter")
)
)
page_one <- tabPanel(
"Scatter Plot",
sidebarLayout(
sidebarPanel =
h2("Select Variables"),
x_input,
y_input
),
mainPanel(
h1("Scatter Plot"),
p("This is paragraph"),
plotOutput("scatter")
)
)
page_one <- tabPanel(
"Scatter Plot",
sidebarLayout(
sidebarPanel =
h2("Select Variables"),
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita"
)
),
mainPanel(
h1("Scatter Plot"),
p("This is paragraph"),
plotOutput("scatter")
)
)
runApp()
runApp()
page_one <- tabPanel(
"Scatter Plot",
sidebarLayout(
sidebarPanel =
h2("Select Variables"),
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita"),
y_input <- selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "Social.support"),),
mainPanel(
h1("Scatter Plot"),
p("This is paragraph"),
plotOutput("scatter")
)
)
sidebar <- sidebarLayout(
sidebarPanel =
h2("Select Variables"),
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita"),
y_input <- selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "Social.support"),
)
page_one <- tabPanel(
"Scatter Plot",
sidebar,
mainPanel(
h1("Scatter Plot"),
p("This is paragraph"),
plotOutput("scatter")
)
)
plot_sidebar_content <- sidebarPanel(
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita"),
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "Social.support"),
)
plot_main_content <- mainPanel(
plotOutput("scatter")
)
ui <- navbarPage(
"Group Project",
plot_panel
)
plot_panel <- tabPanel(
"Scatter Plot",
titlePanel("Scatter"),
sidebarLayout(
plot_sidebar_content,
plot_main_content
)
)
ui <- navbarPage(
"Group Project",
plot_panel
)
#ui
library(shiny)
library(ggplot2)
library(plotly)
gdp_range <- range(final_data$GDP.per.capita)
select_values <- colnames(plot_final_data)
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita"
)
y_input <- selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "Social.support"
)
plot_sidebar_content <- sidebarPanel(
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita"),
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "Social.support"),
)
plot_main_content <- mainPanel(
plotOutput("scatter")
)
plot_panel <- tabPanel(
"Scatter Plot",
titlePanel("Scatter"),
sidebarLayout(
plot_sidebar_content,
plot_main_content
)
)
ui <- navbarPage(
"Group Project",
plot_panel
)
library(plotly)
library(ggplot2)
final_data <- read.csv("./data/final_data.csv", stringsAsFactors = FALSE)
plot_final_data <- final_data %>%
select("GDP.per.capita", "Social.support",
"Healthy.life.expectancy",
"Freedom.to.make.life.choices",
"Generosity",
"Perceptions.of.corruption")
server <- function(input, output) {
output$scatter <- renderPlot({
title <- paste0("Scatter Plot:", input$x_var, " v. ", input$y_var)
plot <- ggplot(data = plot_final_data) +
geom_point(mapping = aes_string(x = input$x_var, y = input$y_var)) +
labs(x = input$x_var, y = input$y_var, title = title)
plot
})
}
runApp()
plot_sidebar_content <- sidebarPanel(
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita"),
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "Social.support"),
checkboxInput("smooth", label = strong("Show Trendline"),
value = TRUE)
)
server <- function(input, output) {
output$scatter <- renderPlot({
title <- paste0("Scatter Plot:", input$x_var, " v. ", input$y_var)
plot <- ggplot(data = plot_final_data) +
geom_point(mapping = aes_string(x = input$x_var, y = input$y_var)) +
labs(x = input$x_var, y = input$y_var, title = title)
if (input$smooth) {
plot <- plot + geom_smooth(se = FALSE)
}
plot
})
}
runApp()
runApp()
View(x_input)
View(x_input)
x_input <- "x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita")
"x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita"
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "GDP.per.capita")
y_input <- selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "Social.support")
runApp()
runApp()
ui <- navbarPage(
"Group Project",
plot_panel
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
>>>>>>> 5447f71005f7199ef73f5a4814c3698623f85782
